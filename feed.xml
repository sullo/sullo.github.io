<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://sullo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sullo.github.io/" rel="alternate" type="text/html" /><updated>2021-06-27T09:34:36-04:00</updated><id>https://sullo.github.io/feed.xml</id><title type="html">CIRT.net: The Blog</title><subtitle>&lt;center&gt;&lt;a href=&quot;https://cirt.net/&quot;&gt;&lt;img border=0 src=&quot;/public/images/alien_oval_200x200.png &quot;width=100 height=100&quot;&gt;&lt;/a&gt;&lt;br&gt;The blog of Chris Sullo&lt;/br&gt;- &lt;a href=&quot;https://cirt.net/&quot;&gt;Nikto&lt;/a&gt; -&lt;/center&gt;</subtitle><author><name>Chris Sullo</name><email>sullo@cirt.net</email></author><entry><title type="html">Nikto Interactive</title><link href="https://sullo.github.io/2021/06/26/nikto-interactive/" rel="alternate" type="text/html" title="Nikto Interactive" /><published>2021-06-26T00:00:00-04:00</published><updated>2021-06-26T00:00:00-04:00</updated><id>https://sullo.github.io/2021/06/26/nikto-interactive</id><author><name>Chris Sullo</name><email>sullo@cirt.net</email></author><category term="Nikto" /><summary type="html">So you have Nikto going, but you’re not really sure what’s happening, or how long the scan is going to take? No problem. Nikto has several interactive features you can use while a scan is in progress. If you just want to find out the current status, simply press the space bar to find out what the program is doing, how many requests have been made, and a guesstimate of how long the rest is going to take. You can automate this output every 500 requests by turning on progress reporting by pressing ‘p’ (similarly, pressing it again will turn it off). If you want to get a better feel for how the server is responding to each request, you can turn verbose mode on or off by pressing the ‘v’ key. If you’d like a lot of info, debug is also available by pressing ‘d’. If you’re running up against the end of your testing window, no need to cancel and start again later—simply press a ‘P’ to pause all operations. Nikto will sit around and wait until you’re ready to resume by hitting a ‘P’ again. If you’re giving up or totally out of time, you can press ’N’ to move on to the next host/port (if you ran more than one, or finish up if not) or ‘q’ to quit scanning entirely. Both N/q will wrap up current operations and write report/save output, terminating the program normally and more gracefully than a hard exit will. There are a few more interactive commands which you may find handy for debugging or getting more info from a server, such as reporting cookies, errors, redirections, etc. See the entire list below. One last note: keyboard input is checked every 10 requests, so on very slow scans you might need to wait until input is polled. Here’s the full list: SPACE - Report current scan status v - Turn verbose mode on/off d - Turn debug mode on/off e - Turn error reporting on/off p - Turn progress reporting on/off r - Turn redirect display on/off c - Turn cookie display on/off o - Turn OK display on/off a - Turn auth display on/off q - Quit N - Next host P - Pause</summary></entry><entry><title type="html">Replay Nikto Findings With The Save Option</title><link href="https://sullo.github.io/2021/06/23/nikto-replay-requests/" rel="alternate" type="text/html" title="Replay Nikto Findings With The Save Option" /><published>2021-06-23T00:00:00-04:00</published><updated>2021-06-23T00:00:00-04:00</updated><id>https://sullo.github.io/2021/06/23/nikto-replay-requests</id><author><name>Chris Sullo</name><email>sullo@cirt.net</email></author><category term="Nikto" /><summary type="html">When running Nikto, you have the ability to save all findings in plaintext files by using the -Save option. This option takes one argument, a directory name, which will be used or created to save all findings, one per text file. Each file will be named in the following format: HOSTNAME_PORT_DATE_TESTID.txt These save files contain basic test information such as the test ID and message, the full HTTP response, and JSON representations of both the request and response. They also contain a “Reason” for the finding—for example “Response Code Match” (the code from the HTTP response matched the test database) or “Content Match” (versus the response body), which is helpful for debugging. This text file can be used for evidence of a test finding later, and can also serve as documentation for reports. Additionally, the JSON can be used to replay the original test’s request by using the included replay.pl program (note that Nikto will need the JSON::PP module installed). replay.pl has only two options: -file -proxy By supplying the Nikto save file as the -file option value, replay.pl will parse the request and send it to the original target server. The -proxy option will route the request through the specified proxy (format host:port), which makes it easy to move a request from the command line to a tool like Burp. This type of replay is especially handy when rechecking findings after application changes have been implemented. The output will again provide the original Nikto test information, and will show both the headers and body of the new request. One final tip—by supplying a “.” to the -Save option, Nikto will automatically name and create a new directory in the format: savedir_HOST_PORT_DATETIME</summary></entry></feed>